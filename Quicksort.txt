public class Quicksort
{
    /* This function takes last element as pivot,
       places the pivot element at its correct
       position in sorted array, and places all
       smaller (smaller than pivot) to left of
       pivot and all greater elements to right
       of pivot */
    int partition(int arr[], int left, int right)
    {
    	 int i = left, j = right;

         int tmp;

         int pivot = arr[(left + right) / 2];

         while (i <= j) {

               while (arr[i] < pivot)

                     i++;

               while (arr[j] > pivot)

                     j--;

               if (i <= j) {

                     tmp = arr[i];

                     arr[i] = arr[j];

                     arr[j] = tmp;

                     i++;

                     j--;

               }

         };
         return i;
    }
 
 
    /* The main function that implements QuickSort()
      arr[] --> Array to be sorted,
      low  --> Starting index,
      high  --> Ending index */
    void quickSort(int arr[], int left, int right) {

        int index = partition(arr, left, right);

        if (left < index - 1)

              quickSort(arr, left, index - 1);

        if (index < right)

              quickSort(arr, index, right);

  }
 
    /* A utility function to print array of size n */
    static void printArray(int arr[])
    {
        int n = arr.length;
        for (int i=0; i<n; ++i)
            System.out.print(arr[i]+" ");
        System.out.println();
    }
 
    // Driver program
    public static void main(String args[])
    {
        int arr[] = {44,33,11,55,77,90,40,60,99,22,88,66};
        int n = arr.length;
 
        Quicksort ob = new Quicksort();
        ob.quickSort(arr, 0, n-1);
 
        System.out.println("sorted array");
        printArray(arr);
    }
}

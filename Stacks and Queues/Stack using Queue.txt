import java.util.LinkedList;
import java.util.Queue;

class MyStack {

    Queue<Integer> que1;
    Queue<Integer> que2;

    /** Initialize your data structure here. */
    public MyStack() {
        que1 = new LinkedList();
        que2 = new LinkedList();
    }

    /** Push element x onto stack. */
    public void push(int x) {
        que1.add(x);
    }

    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        shiftQueues();
        return que2.poll();

    }

    private void shiftQueues() {
       // Get the last element to the
        // front of queue
        int s = que1.size();
        Queue<Integer> tmp = new LinkedList<>();
        for (int i = 0; i < s; i++)
        {

            // Get the last element to the
            // front of queue
            for (int j = 0; j < que1.size() - 1; j++)
            {
                int x = que1.peek();
                que1.remove();
                que1.add(x);
            }

            // Get the last element and
            // add it to the new queue
            tmp.add(que1.peek());
            que1.remove();
        }
        while(!que2.isEmpty()){
            tmp.add(que2.poll());
        }
        while(!tmp.isEmpty()){
            que2.add(tmp.poll());
        }
    }

    /** Get the top element. */
    public int top() {
        shiftQueues();
        return que2.peek();
    }

    /** Returns whether the stack is empty. */
    public boolean empty() {
        return que1.isEmpty() && que2.isEmpty();
    }

}



/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
import java.util.*;

class Graph1
{
	
	private enum Color {WHITE, GRAY, BLACK};
    private int V; // No. of vertices
    HashMap<Integer, List<Integer>> map; //Adjacency List
    Map<Integer,Color> cmp;
 // DFS traversal of the vertices reachable from v
Graph1(SortedSet<Integer> s)
{
    this.V = s.size();
    System.out.println("V= " + V);
    map = new HashMap<Integer, List<Integer>> ();
    cmp = new HashMap<Integer,Color>();
    Iterator<Integer> it = s.iterator();
    while(it.hasNext()) {
    	Integer i = it.next();
    	cmp.put(i, Color.WHITE);
    	map.put(i, new ArrayList<Integer> ());
    }
}

//Utility function to add an edge
void addEdge(int v, int w)
{
	List<Integer> list = map.get(v);
	list.add(w);
    map.put(v, list);
    System.out.println("map= " + map);
}

//Recursive function to find if there is back edge
//in DFS subtree tree rooted with 'u'
boolean DFSUtil(int u)
{
 // GRAY :  This vertex is being processed (DFS
 //         for this vertex has started, but not
 //         ended (or this vertex is in function
 //         call stack)
 cmp.put(u,Color.GRAY);
 Iterator<Integer> i = map.get(u).iterator();
 while (i.hasNext())
 {
     Integer v = i.next();  // An adjacent of u

     // If there is
     if (cmp.get(v) == Color.GRAY)
       return true;

     // If v is not processed and there is a back
     // edge in subtree rooted with v
     if (cmp.get(v) == Color.WHITE && DFSUtil(v))
       return true;
 }

 // Mark this vertex as processed
 cmp.put(u, Color.BLACK);

 return false;
}

//Returns true if there is a cycle in graph
boolean isTree()
{
 // Initialize color of all vertices as WHITE
 // Do a DFS traversal beginning with all
 // vertices
	
    		if (DFSUtil(map.keySet().iterator().next())) {
    			System.out.println("Contains cycle");
    			return false;
    		}
    
    for(Color color : cmp.values()) {
    	if(color==Color.WHITE) {
    		System.out.println("Not connected");
    		return false;
    	}
    }
    
 return true;
}

//Driver code to test above
public static void main(String [] args)
{
	Scanner scan = new Scanner(System.in);
	int num = Integer.parseInt(scan.nextLine());
	System.out.println("");
	System.out.println("num= " + num);
	int inp[][] = new int[num][3];
	SortedSet<Integer> node = new TreeSet<Integer> ();
	for (int i=0; i<num; ++i) {
		String input= scan.nextLine();
		String inputs[] = input.split(" ");
		inp[i][0] = Integer.parseInt(inputs[0]);
		inp[i][1] = Integer.parseInt(inputs[1]);
		inp[i][2] = Integer.parseInt(inputs[2]);
	}
	System.out.println("");
	for (int i=0; i<num; ++i) {
		for (int j=0; j<3; ++j) {
			System.out.print("inp[" + i + "][" + j + "]=" + inp[i][j] + " ");
		}
		System.out.println("");
	}
	for (int i=0; i<num; ++i) {
		node.add(inp[i][0]);
		if(inp[i][1]!=-1)
			node.add(inp[i][1]);
		if(inp[i][2]!=-1)
			node.add(inp[i][2]);
		//System.out.println(node);
	}
	System.out.println("node= " + node);
    Graph1 g = new Graph1(node);
    for (int k=0; k<num; ++k) {
			if(inp[k][1]!=-1)
				g.addEdge(inp[k][1], inp[k][0]);
			if(inp[k][2]!=-1)
				g.addEdge(inp[k][0], inp[k][2]);	
    }

 if (g.isTree())
     System.out.println("Graph is a tree");
 else
     System.out.println("Graph is not a tree");
 
 System.out.println("map= " + g.map);
 System.out.println("cmp= " + g.cmp);
scan.close();
}
}




0 -1 1
1 -1 2
2 -1 3
3 -1 0
4 -1 5
5 -1 -1


0 -1 1
1 -1 -1
2 -1 -1
3 -1 2


0 -1 1
1 -1 2
2 -1 3
3 -1 4
4 -1 -1
5 -1 6
6 -1 -1

